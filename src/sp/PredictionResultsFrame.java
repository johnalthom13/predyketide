package sp;

import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Collections;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.LayoutStyle;

import javax.swing.border.Border;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.exception.InvalidSmilesException;


import utils.FileManipulation;
import utils.ResultRankingByNPScore;

/**
 *
 * @author user
 */
@SuppressWarnings("serial")
public class PredictionResultsFrame extends JFrame implements Runnable{



    // Variables declaration - do not modify
	
	@SuppressWarnings("unused")
	private int RESULT_COUNT = 5;
	
	@SuppressWarnings("unused")
	private ArrayList<PolyketideUnit> workingPKS;
    private ArrayList<String> SMILES_Strings;
    
	private ArrayList<PredyketideCompoundResult> predictedResults;

	private PredyketideWorkspaceVars workspace;
	private JPanel synthesisMainPanel;
	
	private PredyketideCompoundResult selectedResult;
    
    private JPanel resultsListPanel;
    private JScrollPane resultsListScrollPane;
    private JScrollPane resultInfoScrollPane;
	private JTextArea resultInfoTextArea;
	private JButton resultsCancelButton;
	private JButton resultsExportButton;
    // End of variables declaration

	protected int SYN_WIDTH;

	protected int SYN_HEIGHT;

    
	/** Creates new form PredictionResultsFrame 
	 * @param i 
	 * @param totalWidth */
    public PredictionResultsFrame(ArrayList<String> SMILES_Strings, ArrayList<PolyketideUnit> workingPKS, 
    		JPanel synthesisPanel, PredyketideWorkspaceVars workspace, int width, int height) {
        
    	this.SMILES_Strings = SMILES_Strings;
        this.workingPKS = workingPKS;
        this.predictedResults = new ArrayList<PredyketideCompoundResult>();
        this.workspace = workspace;
        this.synthesisMainPanel = synthesisPanel;

        
        this.SYN_HEIGHT = height;
        this.SYN_WIDTH = width;
        initComponents(); 
    	        
    }
    

	/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        resultsListScrollPane = new JScrollPane();
        resultsListPanel = new JPanel();
        resultInfoScrollPane = new JScrollPane();
        resultInfoTextArea = new JTextArea();
        resultsCancelButton = new JButton();
        resultsExportButton = new JButton();
        resultsListPanel.setBackground(new Color(255, 255, 255));

        GroupLayout resultsListPanelLayout = new GroupLayout(resultsListPanel);
        resultsListPanel.setLayout(new FlowLayout(FlowLayout.CENTER));
        resultsListPanelLayout.setHorizontalGroup(
                resultsListPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGap(0, 624, Short.MAX_VALUE)
            );
        resultsListPanelLayout.setVerticalGroup(
        		resultsListPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGap(0, 167, Short.MAX_VALUE)
            );

        resultsListScrollPane.setViewportView(resultsListPanel);

        resultInfoTextArea.setColumns(20);
        resultInfoTextArea.setRows(5);
        resultInfoTextArea.setEditable(false);
        resultInfoScrollPane.setViewportView(resultInfoTextArea);


        resultsCancelButton.setText("Cancel");
        resultsCancelButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				dispose();
			}
		});
        
        resultsExportButton.setText("Export");
        resultsExportButton.setEnabled(false);
        resultsExportButton.addActionListener(new ActionListener() {
			

			@Override
			public void actionPerformed(ActionEvent e) {
				FileManipulation.exportPredictionAsZip(selectedResult, workspace, synthesisMainPanel, 
						SYN_WIDTH, SYN_HEIGHT);
			}
		});


        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(resultsListScrollPane, GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
                        .addComponent(resultInfoScrollPane, GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)

                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(resultsExportButton)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(resultsCancelButton)))





                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)

                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()

                    .addComponent(resultsListScrollPane, GroupLayout.PREFERRED_SIZE, 169, GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(resultInfoScrollPane, GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                    .addGap(12, 12, 12)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(resultsCancelButton)
                        .addComponent(resultsExportButton))
                    .addContainerGap())
            );

        resultsListScrollPane.setSize(PredyketideCompoundResult.IMAGE_THUMBLENGTH, PredyketideCompoundResult.IMAGE_THUMBLENGTH);
        
        this.setTitle("Ranked Polyketide Natural Products");
        this.pack();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        this.setVisible(true);
    }// </editor-fold>
    
    
    private void createRankedResult(){
    	
    	//TODO GUI to tell user what is happening
    	    	
    	for(String SMILES: this.SMILES_Strings){
    		
    		PredyketideCompoundResult pksPredictionCompound = new PredyketideCompoundResult(SMILES);
    		this.predictedResults.add(pksPredictionCompound);

         	Collections.sort(predictedResults, new ResultRankingByNPScore());
    		//draw on Panel

			try {
				pksPredictionCompound.generateResultImage();
			} catch (InvalidSmilesException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			resultsListPanel.removeAll();
			resultsListPanel.revalidate();
			
			for(PredyketideCompoundResult predictionInstance : predictedResults){
				
				Border border = BorderFactory.createLineBorder(Color.GREEN, 3);   
				
				JLabel aPredictionImage = new JLabel(predictionInstance.getThumbnail());
				aPredictionImage.setBorder(border);
				aPredictionImage.addMouseListener(new PredictionMouseAction(predictionInstance));
				
				resultsListPanel.add(aPredictionImage);	
			}
			
			resultsListPanel.revalidate();
    		
    	}
    	
     	
     	
    }


	@Override
	public void run() {
		createRankedResult();
	}
	
	public class PredictionMouseAction implements MouseListener {

		PredyketideCompoundResult aPrediction;
		
		public PredictionMouseAction(PredyketideCompoundResult pksPredictionCompound) {
			this.aPrediction = pksPredictionCompound;
		}

		@Override
		public void mouseClicked(MouseEvent arg0) {
			if(arg0.getClickCount() == 2){
				JDialog popupImage = new JDialog();
				popupImage.add(new JLabel(new ImageIcon(aPrediction.getImage())));
				popupImage.setModal(true);
				popupImage.pack();
				popupImage.setVisible(true);
			}
		}

		@Override
		public void mouseEntered(MouseEvent arg0) {
			// TODO Auto-generated method stub

		}

		@Override
		public void mouseExited(MouseEvent arg0) {
			// TODO Auto-generated method stub

		}

		@Override
		public void mousePressed(MouseEvent arg0) {
			// TODO Auto-generated method stub

		}

		@Override
		public void mouseReleased(MouseEvent arg0) {
			try {
				resultInfoTextArea.setText(aPrediction.getDescriptors());
				resultInfoTextArea.setCaretPosition(0);
				resultsExportButton.setEnabled(true);
				selectedResult = this.aPrediction;
			} catch (CDKException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

	}

	
}
